# check input data of previous script
system("open -a \"Microsoft Excel\" \"/Users/paul/Documents/OU_eDNA/200403_manuscript/5_online_repository/tables/998_r_map_and_add_obis__full_data_raw.xlsx\"")
long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/998_r_map_and_add_obiss__full_data_raw.Rds")
# III. Read in and format data
# ============================
# - mark non-NZ species  **(possibly needs to be re-worked)**
# - split "fish" and "full" data
# - filter for data completeness **(possibly needs to be re-worked)**
# Mark non-NZ species  **(possibly needs to be re-worked)**
# ---------------------------------------------------------
#  16-Mar-2021 add asterisks ("*") to non-NZ species, and ("**") to non-fish (mammals and crustaceans)
#  after checking with list
#  Roberts, C., Stewart, A., Struthers, C., Barker, J. & Kortet, S. 2019 Checklist of the Fishes of New Zealand.
nonnz_fish <- c("Asterropteryx", "Banjos", "Benitochromis", "Bostrychus", "Bovichtus", "Caprodon", "Coptodon", "Engraulis", "Gobiesox", "Gymnoscopelus", "Helcogramma", "Microcanthus", "Opistognathus", "Phoxinus", "Sander", "Scobinichthys")
nonnz_othr <- c("Macroctopus", "Jasus", "Arctocephalus", "Balaenoptera", "Tursiops")
long_table %<>% mutate(GENUS =
case_when(GENUS %in% nonnz_fish ~ paste0(GENUS, "*"),
GENUS %in% nonnz_othr ~ paste0(GENUS, "**"),
TRUE ~ GENUS)
)
# Filter for data completeness **(possibly needs to be re-worked)**
# ------------------------------------------------------------------
# - not done yet -
# continue her after 7-Jul-2021:
# possibly get equivalent of BOTH.PRES
# ------------------------------
# function needs to
#   get presence / absence on a {taxonomic level} (SPECIES)
#   per a {location} (SET.ID  RESERVE.GROUP.LOCATION )
#   ? check data completeness  {all "1" in BRUV.OBS.PRES	EDNA.OBS.PRES	OBIS.OBS.PRES}
# Split "fish" and "full" data
# ----------------------------
full_biodiv <- long_table %>% distinct()
fish_biodiv <- long_table %>% distinct() %>% filter(CLASS %in% c("Actinopteri", "Chondrichthyes")) %>% filter(!(GENUS %in% c("Sardinops")))
# III. Get Euler plots
# ====================
# get euler analysis results for plotting / plot_label = TRUE shrinks plots a lot
euler_obs_full_bio <- lapply(list("PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS", "SPECIES"), get_euler_object, full_biodiv)
euler_ggp_full_bio <- mapply(get_euler_ggplot, list("PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS", "SPECIES"),  euler_obs_full_bio, plot_label = FALSE, SIMPLIFY = FALSE)
# plot euler analysis results
euler_obs_fish_bio <- lapply(list("PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS", "SPECIES"), get_euler_object, fish_biodiv)
euler_ggp_fish_bio <- mapply(get_euler_ggplot, list("PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS", "SPECIES"),  euler_obs_fish_bio, plot_label = FALSE, SIMPLIFY = FALSE)
# create compound plot with better labels then with plot_label = TRUE above
ggarrange(
ggarrange(plotlist = euler_ggp_full_bio,  ncol = 1, nrow = 6,
labels = str_to_sentence(c("PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS", "SPECIES")),
font.label = list(size = 12, color = "black", face = "bold.italic", family = NULL),
vjust = 4.5
),
ggarrange(plotlist = euler_ggp_fish_bio,  ncol = 1, nrow = 6), ncol = 2,
labels = c("a","b")
)
# save compound plot with better labels then with plot_label = TRUE above
ggsave("210712_998_r_summarize_results__euler_edna_bruv_obis.pdf", plot = last_plot(),
device = "pdf", path = "/Users/paul/Documents/OU_eDNA/200403_manuscript/3_main_figures_and_tables_components",
scale = 1.5, width = 75, height = 175, units = c("mm"),
dpi = 500, limitsize = TRUE)
ggarrange(
ggarrange(plotlist = euler_ggp_full_bio,  ncol = 1, nrow = 6,
labels = str_to_sentence(c("PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS", "SPECIES")),
font.label = list(size = 12, color = "black", face = "bold.italic", family = NULL),
vjust = 4.5
),
ggarrange(plotlist = euler_ggp_fish_bio,  ncol = 1, nrow = 6), ncol = 2,
labels = c("a","b")
)
# save compound plot with better labels then with plot_label = TRUE above
ggsave("210712_998_r_summarize_results__euler_edna_bruv_obis.pdf", plot = last_plot(),
device = "pdf", path = "/Users/paul/Documents/OU_eDNA/200403_manuscript/3_main_figures_and_tables_components",
scale = 1.5, width = 75, height = 175, units = c("mm"),
dpi = 500, limitsize = TRUE)
# IV. get geographical maps with heat overlays
# =============================================
# compare script  ~/Documents/OU_eDNA/200901_scripts/998_r_map_and_add_obis.r
# data preparation
# ----------------
# for mapping: get column-subset sf's with WGS 84 in degrees
full_biodiv_sf <- get_sf_biodiv(full_biodiv)
fish_biodiv_sf <- get_sf_biodiv(fish_biodiv)
# for mapping: get map layers
nzshp_hires_WGS84_sf <- read_sf("/Users/paul/GIS/NZ_coast/NZ_Coast_isl.shp") %>% st_transform(crs = 4326)
nzshp_lores_WGS84_sf <- rmapshaper::ms_simplify(input = as(nzshp_hires_WGS84_sf, 'Spatial')) %>% st_as_sf
# for mapping: define bounding boxes as in map in previous script
#  field work area & sample groups
bbox_fwork <- st_as_sfc(st_bbox(c(xmin = (166.5-0.1), xmax = (167.0+0.1), ymax = (-46.04-0.1), ymin = (-45.52+0.1)), crs = st_crs(4326)))
#  boxes around default value RESERVE.GROUP.LOCATION
bbox_rgl_full_biodiv <- get_bbox_anyloc(full_biodiv) # must use original object, not sf
bbox_rgl_fish_biodiv <- get_bbox_anyloc(fish_biodiv) # must use original object, not sf
# for mapping and buffer calculations at correct scale: re-project all sf's to local km
get_reprojection <- function(sf) st_transform(sf, crs = st_crs("+proj=utm +zone=58G +datum=WGS84 +units=km"))
full_biodiv_sf_km <- get_reprojection(full_biodiv_sf)
fish_biodiv_sf_km <- get_reprojection(fish_biodiv_sf)
nzshp_hires_WGS84_sf_km <- get_reprojection(nzshp_hires_WGS84_sf)
nzshp_lores_WGS84_sf_km <- get_reprojection(nzshp_lores_WGS84_sf)
bbox_fwork_km <- get_reprojection(bbox_fwork)
bbox_rgl_full_biodiv_km <- get_reprojection(bbox_rgl_full_biodiv)
bbox_rgl_fish_biodiv_km <- get_reprojection(bbox_rgl_fish_biodiv)
# calculate 2.5 km buffers
full_biodiv_sf_km_sid_buff <- full_biodiv_sf_km %>% select("SET.ID") %>% distinct %>% st_buffer(2.5)
fish_biodiv_sf_km_sid_buff <- fish_biodiv_sf_km %>% select("SET.ID") %>% distinct %>% st_buffer(2.5)
# get dataframes suitable for plotting with below functions - write as function
full_biodiv_df_edna <- get_plot_df(full_biodiv_sf_km, "eDNA")
full_biodiv_df_bruv <- get_plot_df(full_biodiv_sf_km, "BRUV")
full_biodiv_df_obis <- get_plot_df(full_biodiv_sf_km, "OBIS")
fish_biodiv_df_edna <- get_plot_df(fish_biodiv_sf_km, "eDNA")
fish_biodiv_df_edna <- get_plot_df(fish_biodiv_sf_km, "BRUV")
fish_biodiv_df_edna <- get_plot_df(fish_biodiv_sf_km, "OBIS")
get_ggeom_density(get_plot_df(fish_biodiv_sf_km))
get_ggeom_density(get_plot_df(fish_biodiv_sf_km, c("eDNA")))
get_ggeom_density(get_plot_df(fish_biodiv_sf_km, c("BRUV")))
get_ggeom_density(get_plot_df(fish_biodiv_sf_km, c("OBIS")))
map_inset <-  ggplot(data = nzshp_lores_WGS84_sf) + geom_sf(fill = "grey93", color = "red", lwd = 0.5) +
geom_sf(data = bbox_fwork, fill = NA, color = "darkred", size = 1) + theme_void()
plot_full_biodiv <- ggplot() +
geom_density_2d_filled(data = get_plot_df(full_biodiv_sf_km), aes(x= lon , y = lat), contour_var = "count", alpha = 0.5) +
facet_grid(. ~ SAMPLE.TYPE) +
geom_sf(data = nzshp_lores_WGS84_sf_km, color=alpha("grey20",1), alpha = 0.8) +
# geom_sf(data = fish_biodiv_sf_km_sid_buff, fill = NA, colour = "darkgrey") +
stat_sf_coordinates(data = full_biodiv_sf_km, aes(shape = RESERVE.GROUP), color = "grey20", size = 2) +
stat_sf_coordinates(data = full_biodiv_sf_km, aes(shape = RESERVE.GROUP), color = "white", size = 1) +
coord_sf(xlim = c((619.6011-10), (653.8977+10)), ylim = c((-5100.241-10),(-5042.894+10)) , expand = FALSE) +
theme_bw() +
theme(legend.position= "none",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
plot_fish_biodiv <- ggplot() +
geom_density_2d_filled(data = get_plot_df(fish_biodiv_sf_km), aes(x= lon , y = lat), contour_var = "count", alpha = 0.5) +
facet_grid(. ~ SAMPLE.TYPE) +
geom_sf(data = nzshp_lores_WGS84_sf_km, color=alpha("grey20",1), alpha = 0.8) +
# geom_sf(data = fish_biodiv_sf_km_sid_buff, fill = NA, colour = "darkgrey") +
stat_sf_coordinates(data = fish_biodiv_sf_km, aes(shape = RESERVE.GROUP), color = "grey20", size = 2) +
stat_sf_coordinates(data = fish_biodiv_sf_km, aes(shape = RESERVE.GROUP), color = "white", size = 1) +
coord_sf(xlim = c((619.6011-10), (653.8977+10)), ylim = c((-5100.241-10),(-5042.894+10)) , expand = FALSE) +
theme_bw() +
theme(legend.position= "none",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggarrange( plot_full_biodiv, plot_fish_biodiv,
ncol = 1, nrow = 2, labels = c("a","b") )
# save compound plot with better labels then with plot_label = TRUE above
ggsave("210712_998_r_summarize_results__geoheat_edna_bruv_obis.pdf", plot = last_plot(),
device = "pdf", path = "/Users/paul/Documents/OU_eDNA/200403_manuscript/3_main_figures_and_tables_components",
scale = 2, width = 85, height = 85, units = c("mm"),
dpi = 500, limitsize = TRUE)
full_biodiv  %>% select("PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS", "SPECIES") %>% distinct()
full_biodiv
fish_biodiv$NCBI.TAXID
#   **************************************************
#   * Combine, filter, and inspect long tables from  *
#   *   from eDNA data and BRUV observations         *
#   **************************************************
#   26-Feb-2021, 1-Mar-2021, 7-Jul-2021, 15-Jul-2021
# I. Load packages
# ================
rm(list = ls(all.names = TRUE))
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
gc()
library("tidyverse")   # tibbles, pipes, and more
library("magrittr") # more pipes
library("robis")       # access OBIS data
library("readxl")      # read Excel files
library("openxlsx")    # write Excel tables
options(tibble.print_max = Inf)
# II. Functions
# =============
# Define new operator "not in"
"%!in%" <- function(x, y) !(x %in% y)
# III. Combine data
# =================
# load data
# ----------
# eDNA data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/990_r_get_eDNA_long_table.r"
edna_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/200403_manuscript/5_online_repository/R_objects/210301_990_r_get_eDNA_long_table__eDNA_data.Rds")
# BRUV data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/995_r_get_BRUV_long_table.r"
bruv_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210226_995_r_get_BRUV_long_table__mh_bruv_obs.Rds")
# PUBL data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/995_r_get_PUBL_long_table.r"
publ_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210723_995_r_get_PUBL_long_table__publ_obs.Rds")
stack_long_table <- bind_rows(edna_long_table, bruv_long_table, publ_long_table)
dim(stack_long_table) #  466 x 67
names(stack_long_table)
stack_long_table <- stack_long_table %>% arrange(SET.ID)
# need to have three or two UNIQ.REP.IDS, otherwise can't analyse data
#   7-Jul-21:
#     practically this is keeping only sets with complete eDNA and Bruv observations
#     also check /Users/paul/Documents/OU_eDNA/200901_scripts/998_r_map_and_add_obis.r,
#     reused there to set the  UNIQ.REP.IDS, but no re-filtering applied
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% mutate(UNIQ.REP.IDS = n_distinct(REP.ID))
stack_long_table <- stack_long_table %>% filter(UNIQ.REP.IDS %in% c(2,3))
# among three or two UNIQ.REP.IDS needs to be on REP.ID = 3 (BRUV data) otherwise can't analyse
stack_long_table <- stack_long_table %>% filter(any(REP.ID == 3))
# sorting and inspection for sanity reasons
stack_long_table <- stack_long_table %>% arrange(desc(UNIQ.REP.IDS), SET.ID, REP.ID)
# works now:
# SET.ID: data set labels
# REP.ID: replicate identifiers (of which "3", marks lines with BRUV data)
# rearrange columns
stack_long_table <-  stack_long_table %>% relocate(SET.ID,	REP.ID, LOC.NAME, INSIDE.RESERVE,  MH.GPS.LAT,	MH.PPS.LONG,  SUPERKINGDOM,	PHYLUM,	CLASS,	ORDER,	FAMILY,	GENUS,	SPECIES)
# fill missing values for analysis
stack_long_table %>% group_by(SET.ID) %>% print(n = Inf)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(LOC.NAME) %>% print(n = Inf)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(INSIDE.RESERVE) %>% print(n = Inf)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(MH.GPS.LAT, .direction = c("downup")) %>% print(n = Inf)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(MH.PPS.LONG, .direction = c("downup")) %>% print(n = Inf)
# eDNA data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/990_r_get_eDNA_long_table.r"
edna_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/200403_manuscript/5_online_repository/R_objects/210301_990_r_get_eDNA_long_table__eDNA_data.Rds")
# BRUV data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/995_r_get_BRUV_long_table.r"
bruv_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210226_995_r_get_BRUV_long_table__mh_bruv_obs.Rds")
# PUBL data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/995_r_get_PUBL_long_table.r"
publ_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210723_995_r_get_PUBL_long_table__publ_obs.Rds")
publ_long_table
stack_long_table <- bind_rows(edna_long_table, bruv_long_table, publ_long_table)
stack_long_table
dim(stack_long_table) #  466 x 67
names(stack_long_table)
stack_long_table <- stack_long_table %>% arrange(SET.ID)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% mutate(UNIQ.REP.IDS = n_distinct(REP.ID))
stack_long_table <- stack_long_table %>% filter(UNIQ.REP.IDS %in% c(2,3))
stack_long_table <- stack_long_table %>% filter(any(REP.ID == 3))
stack_long_table <- stack_long_table %>% arrange(desc(UNIQ.REP.IDS), SET.ID, REP.ID)
stack_long_table
# works now:
# SET.ID: data set labels
# REP.ID: replicate identifiers (of which "3", marks lines with BRUV data)
# rearrange columns
stack_long_table <-  stack_long_table %>% relocate(SET.ID,	REP.ID, LOC.NAME, INSIDE.RESERVE,  MH.GPS.LAT,	MH.PPS.LONG,  SUPERKINGDOM,	PHYLUM,	CLASS,	ORDER,	FAMILY,	GENUS,	SPECIES)
stack_long_table
rm(list = ls(all.names = TRUE))
gc()
library("tidyverse")   # tibbles, pipes, and more
library("magrittr") # more pipes
library("robis")       # access OBIS data
library("readxl")      # read Excel files
library("openxlsx")    # write Excel tables
options(tibble.print_max = Inf)
# II. Functions
# =============
# Define new operator "not in"
"%!in%" <- function(x, y) !(x %in% y)
# III. Combine data
# =================
# load data
# ----------
# eDNA data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/990_r_get_eDNA_long_table.r"
edna_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/200403_manuscript/5_online_repository/R_objects/210301_990_r_get_eDNA_long_table__eDNA_data.Rds")
# BRUV data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/995_r_get_BRUV_long_table.r"
bruv_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210226_995_r_get_BRUV_long_table__mh_bruv_obs.Rds")
# PUBL data by  "/Users/paul/Documents/OU_eDNA/200901_scripts/995_r_get_PUBL_long_table.r"
publ_long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210723_995_r_get_PUBL_long_table__publ_obs.Rds")
# stack data
# ----------
stack_long_table <- bind_rows(edna_long_table, bruv_long_table)
dim(stack_long_table) #  466 x 67
names(stack_long_table)
# IV. Format data
# ===============
# sorting and inspection for sanity reasons
stack_long_table <- stack_long_table %>% arrange(SET.ID)
# need to have three or two UNIQ.REP.IDS, otherwise can't analyse data
#   7-Jul-21:
#     practically this is keeping only sets with complete eDNA and Bruv observations
#     also check /Users/paul/Documents/OU_eDNA/200901_scripts/998_r_map_and_add_obis.r,
#     reused there to set the  UNIQ.REP.IDS, but no re-filtering applied
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% mutate(UNIQ.REP.IDS = n_distinct(REP.ID))
stack_long_table <- stack_long_table %>% filter(UNIQ.REP.IDS %in% c(2,3))
# among three or two UNIQ.REP.IDS needs to be on REP.ID = 3 (BRUV data) otherwise can't analyse
stack_long_table <- stack_long_table %>% filter(any(REP.ID == 3))
# sorting and inspection for sanity reasons
stack_long_table <- stack_long_table %>% arrange(desc(UNIQ.REP.IDS), SET.ID, REP.ID)
# works now:
# SET.ID: data set labels
# REP.ID: replicate identifiers (of which "3", marks lines with BRUV data)
# rearrange columns
stack_long_table <-  stack_long_table %>% relocate(SET.ID,	REP.ID, LOC.NAME, INSIDE.RESERVE,  MH.GPS.LAT,	MH.PPS.LONG,  SUPERKINGDOM,	PHYLUM,	CLASS,	ORDER,	FAMILY,	GENUS,	SPECIES)
# fill missing values for analysis
stack_long_table %>% group_by(SET.ID) %>% print(n = Inf)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(LOC.NAME)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(INSIDE.RESERVE)
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(MH.GPS.LAT, .direction = c("downup"))
stack_long_table <- stack_long_table %>% group_by(SET.ID) %>% fill(MH.PPS.LONG, .direction = c("downup"))
# V. Redefine areas inside and out side marine reserves
# ========================================================
# done using GID externally - check `/Users/paul/Documents/OU_eDNA/200403_manuscript/6_analysis_notes/210301_sample_map_overview.pdf`
# see subsequent script for site assignments - but not run here to maintain compatibility with MdL scripts
#  long_table <- long_table %>% mutate( RESERVE.GROUP = case_when(RESERVE.GROUP == "A" ~ "WJ", RESERVE.GROUP == "B" ~ "FF", RESERVE.GROUP == "C" ~ "LS"))
stack_long_table <- stack_long_table %>% mutate(RESERVE.GROUP =
case_when(SET.ID %in% c(21,22,23,24) ~ "A",
SET.ID %in% c(26,27,28,29) ~ "A",
SET.ID %in% c(11,12)       ~ "B",
SET.ID %in% c(17,18,19)    ~ "B",
SET.ID %in% c(7,8,9,10)    ~ "C",
SET.ID %in% c(1,3,4,5)     ~ "C"))
stack_long_table <- stack_long_table %>% mutate(RESERVE.GROUP.INSIDE =
case_when(SET.ID %in% c(21,22,23,24) ~ TRUE,
SET.ID %in% c(26,27,28,29)  ~ FALSE,
SET.ID %in% c(11,12)       ~ TRUE,
SET.ID %in% c(17,18,19)    ~ FALSE,
SET.ID %in% c(7,8,9,10)    ~ FALSE,
SET.ID %in% c(1,3,4,5)     ~ TRUE))
long_table <- stack_long_table %>% mutate(SAMPLE.TYPE = case_when(REP.ID %in% c(3)   ~  "BRUV",
REP.ID %in% c(1,2) ~  SAMPLE.TYPE))
# correct location name in fulls table
long_table <- long_table %>% mutate( RESERVE.GROUP = case_when(RESERVE.GROUP == "A" ~ "WJ", RESERVE.GROUP == "B" ~ "FF", RESERVE.GROUP == "C" ~ "LS"))
# remove three undetermined fish taxa from BRUV
long_table <- long_table %>% filter(ORDER != "NA") %>% print(n = Inf)
# combine RESERVE.GROUP and RESERVE.GROUP.INSIDE to get six locations RESERVE.GROUP.LOCATION
long_table$RESERVE.GROUP
long_table$RESERVE.GROUP.INSIDE
long_table <- long_table %>% mutate( RESERVE.GROUP.LOCATION =
case_when(RESERVE.GROUP == "WJ" & RESERVE.GROUP.INSIDE == TRUE  ~ "WJ MR",
RESERVE.GROUP == "WJ" & RESERVE.GROUP.INSIDE == FALSE ~ "WJ CTRL",
RESERVE.GROUP == "FF" & RESERVE.GROUP.INSIDE == TRUE  ~ "FF MR",
RESERVE.GROUP == "FF" & RESERVE.GROUP.INSIDE == FALSE ~ "FF CTRL",
RESERVE.GROUP == "LS" & RESERVE.GROUP.INSIDE == TRUE  ~ "LS MR",
RESERVE.GROUP == "LS" & RESERVE.GROUP.INSIDE == FALSE ~ "LS CTRL")
)
long_table$RESERVE.GROUP.LOCATION
long_table <- long_table %>% relocate(RESERVE.GROUP.LOCATION)
# set BRUV observations to 1 for downstream generation of ASV presence column
long_table <- long_table %>% mutate(ABUNDANCE =
case_when(SAMPLE.TYPE == "BRUV" & is.na(ABUNDANCE) ~ 1,
TRUE ~ ABUNDANCE)
)
# rearrange columns
long_table <-  long_table %>% relocate(SET.ID,	REP.ID, SAMPLE.TYPE, LOC.NAME, MH.GPS.LAT,
MH.PPS.LONG, RESERVE.GROUP,  RESERVE.GROUP.INSIDE, RESERVE.GROUP.LOCATION, SUPERKINGDOM,
PHYLUM,	CLASS,	ORDER,	FAMILY,	GENUS,	SPECIES)
print(long_table)
# VI. Insert 15-Jul-2021 - add NCBI data in (had been lost)
# ==========================================================
# check relavant columns - NCBI.TAXID needs to be filled (again) for eDNA data
long_table |> select(SAMPLE.TYPE, ASV, NCBI.TAXID)
# load "blast_results_final" to get access to the "tax_id" column looked up previously
load(file="/Users/paul/Documents/OU_eDNA/201028_Robjects/210202_get_q2_tax-tab__blast-noenv_with-ncbi_taxonomy.Rdata")
blast_results_final |> select(iteration_query_def, tax_id)
# fill in missing NCBI tax strings
long_table <- long_table |>
left_join( {blast_results_final |> select(iteration_query_def, tax_id) |> setNames(c("ASV", "NCBI.TAXID"))} , by = c("ASV")) |>
unite(NCBI.TAXID, c(NCBI.TAXID.x, NCBI.TAXID.y), remove = TRUE, na.rm = TRUE) # |>
# select(SAMPLE.TYPE, ASV, NCBI.TAXID)
# VIII. Insert 23-Jul-2021 - add Publication data
# ==============================================
# for superseded QGIS mapping in /Users/paul/Documents/OU_eDNA/200403_manuscript/3_main_figures_and_tables_components/210307_sample_map.qgz
write.csv(long_table, "/Users/paul/Documents/OU_eDNA/200403_manuscript/3_main_figures_and_tables_components/210301_997_r_format_longtables__analysis_input.csv")
long_table <- bind_rows(long_table, publ_long_table)
long_table <- bind_rows({long_table |> mutate(NCBI.TAXID = as.numeric(NCBI.TAXID)}, publ_long_table)
long_table <- bind_rows( {long_table |> mutate(NCBI.TAXID = as.numeric(NCBI.TAXID))}, publ_long_table)
long_table
dim(long_table) # 267 x 71
save.image(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210301_997_r_format_longtables__analysis_input__image.Rdata")
save.image(file = "/Users/paul/Documents/OU_eDNA/210705_r_workspaces/210301_997_r_format_longtables__analysis_input__image.Rdata")
# for verbosity
write.xlsx(long_table, "/Users/paul/Documents/OU_eDNA/200403_manuscript/5_online_repository/tables/210301_997_r_format_longtables__analysis_input.xlsx", asTable = FALSE, overwrite = TRUE)
# for previous analysis by MDL
saveRDS(long_table, file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210301_997_r_format_longtables__analysis_input.Rds")
saveRDS(long_table, file = "/Users/paul/Documents/OU_eDNA/200403_manuscript/5_online_repository/R_objects/210301_997_r_format_longtables__analysis_input.Rds")
#   **************************************
#   * Get a nice map and add OBIS data   *
#   *                                    *
#   **************************************
#
# I. Load packages
# ================
rm(list = ls(all.names = TRUE))
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
gc()
library("tidyverse")   # tibbles, pipes, and more
library("magrittr") # more pipes
library("robis")       # access OBIS data
library("sf")          # create buffer around sampling areas
library("sp")
library("taxonomizr")  # get NCBI tax ids
library("taxize") # better then "taxonomizr" - may use and recode
Sys.setenv(ENTREZ_KEY="a634c6e9c96c3859bca27a2771f6d2872f08")
Sys.getenv("ENTREZ_KEY")
library("readxl")      # read Excel files
library("openxlsx")    # write Excel tables
options(tibble.print_max = Inf)
# II. Functions
# =============
# Define new operator "not in"
"%!in%" <- function(x, y) !(x %in% y)
# III. Load data
# ==============
long_table <- readRDS(file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/210301_997_r_format_longtables__analysis_input.Rds")
# IV. prepare OBIS data and a map
# ================================
# use CRS 4326
# keep in mind
#  long_table_dt_map <- long_table_dt[, lapply(.SD, sum, na.rm=TRUE), by=c("MH.GPS.LAT", "MH.PPS.LONG", "RESERVE.GROUP", "RESERVE.GROUP.INSIDE", "RESERVE.GROUP.LOCATION", "SUPERKINGDOM",  "PHYLUM",  "CLASS",  "ORDER",  "FAMILY",  "GENUS"), .SDcols=c("BOTH.PRES") ]
# of
#  /Users/paul/Documents/OU_eDNA/200901_scripts/998_r_summarize_results.r
# get a table with relevant columns  for OBIS lookup
lt_obis_lookup <- long_table %>%
select("SET.ID", "MH.GPS.LAT", "MH.PPS.LONG",  "RESERVE.GROUP", "RESERVE.GROUP.INSIDE", "RESERVE.GROUP.LOCATION") %>%
distinct() %>% arrange(SET.ID)
# modify SET.ID
#  from "98" Publication data set
#  to "99" Obis data set to be added below (to each line)
lt_obis_lookup  <- lt_obis_lookup |> mutate(SET.ID = ifelse(SET.ID == 98, 99, SET.ID))
# add missing values for newly added publication data **use those below, again**
# use code to adjust great circle position
left_deg <- c( 0.150)
up_deg   <- c(-0.035)
lt_obis_lookup <- lt_obis_lookup |>  mutate(MH.GPS.LAT = ifelse(is.na(MH.GPS.LAT), (mean(na.omit(lt_obis_lookup$MH.GPS.LAT) + up_deg)), MH.GPS.LAT))
lt_obis_lookup <- lt_obis_lookup |>  mutate(MH.PPS.LONG = ifelse(is.na(MH.PPS.LONG), (mean(na.omit(lt_obis_lookup$MH.PPS.LONG) + left_deg) ), MH.PPS.LONG))
lt_obis_lookup <- lt_obis_lookup |>  mutate(RESERVE.GROUP = ifelse(is.na(RESERVE.GROUP), "FI", RESERVE.GROUP))
lt_obis_lookup <- lt_obis_lookup |>  mutate(RESERVE.GROUP.INSIDE = ifelse(is.na(RESERVE.GROUP.INSIDE), FALSE, RESERVE.GROUP.INSIDE))
lt_obis_lookup <- lt_obis_lookup |>  mutate(RESERVE.GROUP.LOCATION = ifelse(RESERVE.GROUP == "FI", "FI CTRL", RESERVE.GROUP.LOCATION))
lt_obis_lookup %>% print(n= Inf)
# get clean spatial data in degree units
# ---------------------------------------
#
# https://gis.stackexchange.com/questions/292327/creating-buffers-around-points-and-merging-with-spatialpolygonsdataframe-to-crea
# https://www.earthdatascience.org/courses/earth-analytics/spatial-data-r/understand-epsg-wkt-and-other-crs-definition-file-types/
# check cordinates sytems
EPSG <- rgdal::make_EPSG()
EPSG %>% filter(code == 4326)
head(EPSG, 3)
# for buffer calculation - get sample coordinates as sf object with coordinates in EPSG 4326 / WGS84
lt_obis_lookup_sf <- st_as_sf(lt_obis_lookup,coords=c("MH.PPS.LONG","MH.GPS.LAT"))
lt_obis_lookup_sf %<>% st_set_crs(4326) # set CRS to WGS84
# for (test) maps  - get background layer(s) coordinates as sf object with coordinates in EPSG 4326 / WGS84
nzshp_hires = read_sf("/Users/paul/GIS/NZ_coast/NZ_Coast_isl.shp")
nzshp_hires_WGS84 <- st_transform(nzshp_hires, crs = 4326)
#   getting a lo-resolution map - https://gis.stackexchange.com/questions/243569/simplify-polygons-of-sf-object
nzshp_lores_WGS84 <- rmapshaper::ms_simplify(input = as(nzshp_hires_WGS84, 'Spatial')) %>% st_as_sf()
# create inset map for publication / define a bounding box around the field work area
#   https://geocompr.github.io/post/2019/ggplot2-inset-maps/
bb_fwork <- st_as_sfc(st_bbox(c(xmin = (166.5-0.1), xmax = (167.0+0.1), ymax = (-46.04-0.1), ymin = (-45.52+0.1)), crs = st_crs(4326)))
map_inset <- ggplot(data = nzshp_lores_WGS84) +
geom_sf(fill = "grey93", color = "red", lwd = 0.5) +
geom_sf(data = bb_fwork, fill = NA, color = "darkred", size = 1) +
theme_void()
# get bounding box around sample groups for publication map
#   https://stackoverflow.com/questions/54696440/create-polygons-representing-bounding-boxes-for-subgroups-using-sf
calc_angle <- function(lon,lat) {
cent_lon <- mean(lon)
cent_lat <- mean(lat)
ang <- atan2(lat - cent_lat, lon - cent_lon)
return(ang)
}
# bounding boxes for all data but Fiordland data
bbox <- lt_obis_lookup %>%
group_by(RESERVE.GROUP.LOCATION) %>% filter(RESERVE.GROUP.LOCATION != "FI CTRL") %>%
summarise(xmin = min(MH.PPS.LONG) -0.01 ,ymin = min(MH.GPS.LAT) -0.01, xmax=max(MH.PPS.LONG) + 0.01,  ymax = max(MH.GPS.LAT) +0.01) %>%
gather(x,lon,c('xmin','xmax')) %>%
gather(y,lat,c('ymin','ymax')) %>%
st_as_sf(coords=c('lon','lat'),crs=4326,remove=F) %>%
group_by(RESERVE.GROUP.LOCATION) %>%
mutate(angle = calc_angle(lon,lat)) %>%
arrange(angle) %>%
summarise(do_union=FALSE) %>%
st_cast('POLYGON')
# check sf objects - looking ok so far
ggplot() +
geom_sf(data = nzshp_hires_WGS84, fill = "lightgrey") +
geom_sf(data = lt_obis_lookup_sf, colour = "red") +
geom_sf(data = bbox, fill = NA, color = "red") +
coord_sf(xlim = c((166.5-0.1), (167.0+0.1)), ylim = c((-46.04-0.1),(-45.52+0.1)), expand = FALSE) +
theme_bw()
# get clean spatial data in local distance units
# ----------------------------------------------
# for buffer generation re-project objects to local kms and check again
lt_obis_lookup_sf_loc <- lt_obis_lookup_sf %>% st_transform(crs = st_crs("+proj=utm +zone=58G +datum=WGS84 +units=km"))
nzshp_hires_WGS84_loc <- nzshp_hires_WGS84 %>% st_transform(crs = st_crs("+proj=utm +zone=58G +datum=WGS84 +units=km"))
bbox_loc <- bbox %>% st_transform(crs = st_crs("+proj=utm +zone=58G +datum=WGS84 +units=km"))
# calculate 2.5 km buffers - for inside cols
# calculate 2.5 km buffers - for outside cols - needs to be one great circle
# dosdy code - check results carefully - last column should have coordinates for a large circle
rows_inside  <- c(1:nrow(lt_obis_lookup_sf_loc)-1)
rows_outside <- c(nrow(lt_obis_lookup_sf_loc))
lt_obis_lookup_sf_buffer_loc <- st_buffer(lt_obis_lookup_sf_loc[rows_inside,  ], 2.5)
lt_obis_lookup_sf_buffer_loc <- rbind(lt_obis_lookup_sf_buffer_loc, st_buffer(lt_obis_lookup_sf_loc[rows_outside, ], 38))
# map to check object and for publication - unit is in km
#  check sf objects  - bounding box as defined per lt_obis_lookup_sf and 10 km in addition
#  inset grob in degrees, but positioned in kilometers
map_main <- ggplot() +
geom_sf(data = nzshp_hires_WGS84_loc, fill = "lightgrey") +
geom_sf(data = lt_obis_lookup_sf_buffer_loc, fill = NA, colour = "red") +
geom_sf(data = filter(lt_obis_lookup_sf_loc, RESERVE.GROUP != "FI"), fill = NA, colour = "darkred") +
geom_sf(data = bbox_loc, fill = NA, color = "darkred") +
stat_sf_coordinates(data = filter(lt_obis_lookup_sf_loc, RESERVE.GROUP != "FI"), aes(shape = RESERVE.GROUP), color = "darkred", size = 3) +
stat_sf_coordinates(data = filter(lt_obis_lookup_sf_loc, RESERVE.GROUP != "FI"), aes(shape = RESERVE.GROUP), color = "red", size = 1) +
geom_sf_label(data=bbox_loc, aes(label = RESERVE.GROUP.LOCATION), nudge_x = 7, nudge_y = 6) +
coord_sf( xlim = c((619.6011-10), (653.8977+10)), ylim = c((-5100.241-10),(-5042.894+10)) , expand = FALSE) +
annotation_custom(ggplotGrob(map_inset), xmin = 610, xmax = 625, ymin = -5065, ymax = -5025) +
theme_bw() +
theme(legend.title = element_blank(),
legend.position=c(.9,.1),
legend.background = element_blank(),
legend.key=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
# see filename - map saving originally implemented in
#  /Users/paul/Documents/OU_eDNA/200901_scripts/998_r_summarize_results.r
# save imgae for combination with other plots
saveRDS(map_main, file = "/Users/paul/Documents/OU_eDNA/201028_Robjects/998_r_get_OBIS_and_map__mapggplot.Rds")
map_main
